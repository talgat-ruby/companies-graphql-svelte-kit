schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

scalar bigint

"""
Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

"""
columns and relationships of "companies"
"""
type companies {
  ceo: String
  created_at: timestamptz!
  founded_year: Int!
  id: Int!
  name: String!

  """An array relationship"""
  products(
    """distinct select on columns"""
    distinct_on: [products_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [products_order_by!]

    """filter the rows returned"""
    where: products_bool_exp
  ): [products!]!

  """An aggregate relationship"""
  products_aggregate(
    """distinct select on columns"""
    distinct_on: [products_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [products_order_by!]

    """filter the rows returned"""
    where: products_bool_exp
  ): products_aggregate!
  type: String!
  updated_at: timestamptz!
}

"""
aggregated selection of "companies"
"""
type companies_aggregate {
  aggregate: companies_aggregate_fields
  nodes: [companies!]!
}

"""
aggregate fields of "companies"
"""
type companies_aggregate_fields {
  avg: companies_avg_fields
  count(columns: [companies_select_column!], distinct: Boolean): Int!
  max: companies_max_fields
  min: companies_min_fields
  stddev: companies_stddev_fields
  stddev_pop: companies_stddev_pop_fields
  stddev_samp: companies_stddev_samp_fields
  sum: companies_sum_fields
  var_pop: companies_var_pop_fields
  var_samp: companies_var_samp_fields
  variance: companies_variance_fields
}

"""aggregate avg on columns"""
type companies_avg_fields {
  founded_year: Float
  id: Float
}

"""
Boolean expression to filter rows from the table "companies". All fields are combined with a logical 'AND'.
"""
input companies_bool_exp {
  _and: [companies_bool_exp!]
  _not: companies_bool_exp
  _or: [companies_bool_exp!]
  ceo: String_comparison_exp
  created_at: timestamptz_comparison_exp
  founded_year: Int_comparison_exp
  id: Int_comparison_exp
  name: String_comparison_exp
  products: products_bool_exp
  products_aggregate: products_aggregate_bool_exp
  type: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "companies"
"""
enum companies_constraint {
  """
  unique or primary key constraint on columns "name"
  """
  companies_name_key

  """
  unique or primary key constraint on columns "id"
  """
  companies_pkey
}

"""
input type for incrementing numeric columns in table "companies"
"""
input companies_inc_input {
  founded_year: Int
  id: Int
}

"""
input type for inserting data into table "companies"
"""
input companies_insert_input {
  ceo: String
  created_at: timestamptz
  founded_year: Int
  id: Int
  name: String
  products: products_arr_rel_insert_input
  type: String
  updated_at: timestamptz
}

"""aggregate max on columns"""
type companies_max_fields {
  ceo: String
  created_at: timestamptz
  founded_year: Int
  id: Int
  name: String
  type: String
  updated_at: timestamptz
}

"""aggregate min on columns"""
type companies_min_fields {
  ceo: String
  created_at: timestamptz
  founded_year: Int
  id: Int
  name: String
  type: String
  updated_at: timestamptz
}

"""
response of any mutation on the table "companies"
"""
type companies_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [companies!]!
}

"""
input type for inserting object relation for remote table "companies"
"""
input companies_obj_rel_insert_input {
  data: companies_insert_input!

  """upsert condition"""
  on_conflict: companies_on_conflict
}

"""
on_conflict condition type for table "companies"
"""
input companies_on_conflict {
  constraint: companies_constraint!
  update_columns: [companies_update_column!]! = []
  where: companies_bool_exp
}

"""Ordering options when selecting data from "companies"."""
input companies_order_by {
  ceo: order_by
  created_at: order_by
  founded_year: order_by
  id: order_by
  name: order_by
  products_aggregate: products_aggregate_order_by
  type: order_by
  updated_at: order_by
}

"""primary key columns input for table: companies"""
input companies_pk_columns_input {
  id: Int!
}

"""
select columns of table "companies"
"""
enum companies_select_column {
  """column name"""
  ceo

  """column name"""
  created_at

  """column name"""
  founded_year

  """column name"""
  id

  """column name"""
  name

  """column name"""
  type

  """column name"""
  updated_at
}

"""
input type for updating data in table "companies"
"""
input companies_set_input {
  ceo: String
  created_at: timestamptz
  founded_year: Int
  id: Int
  name: String
  type: String
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type companies_stddev_fields {
  founded_year: Float
  id: Float
}

"""aggregate stddev_pop on columns"""
type companies_stddev_pop_fields {
  founded_year: Float
  id: Float
}

"""aggregate stddev_samp on columns"""
type companies_stddev_samp_fields {
  founded_year: Float
  id: Float
}

"""
Streaming cursor of the table "companies"
"""
input companies_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: companies_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input companies_stream_cursor_value_input {
  ceo: String
  created_at: timestamptz
  founded_year: Int
  id: Int
  name: String
  type: String
  updated_at: timestamptz
}

"""aggregate sum on columns"""
type companies_sum_fields {
  founded_year: Int
  id: Int
}

"""
update columns of table "companies"
"""
enum companies_update_column {
  """column name"""
  ceo

  """column name"""
  created_at

  """column name"""
  founded_year

  """column name"""
  id

  """column name"""
  name

  """column name"""
  type

  """column name"""
  updated_at
}

input companies_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: companies_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: companies_set_input

  """filter the rows which have to be updated"""
  where: companies_bool_exp!
}

"""aggregate var_pop on columns"""
type companies_var_pop_fields {
  founded_year: Float
  id: Float
}

"""aggregate var_samp on columns"""
type companies_var_samp_fields {
  founded_year: Float
  id: Float
}

"""aggregate variance on columns"""
type companies_variance_fields {
  founded_year: Float
  id: Float
}

"""ordering argument of a cursor"""
enum cursor_ordering {
  """ascending ordering of the cursor"""
  ASC

  """descending ordering of the cursor"""
  DESC
}

"""
columns and relationships of "moons"
"""
type moons {
  created_at: timestamptz!
  id: Int!
  name: String!
  planet_id: Int!
  updated_at: timestamptz!
}

"""
aggregated selection of "moons"
"""
type moons_aggregate {
  aggregate: moons_aggregate_fields
  nodes: [moons!]!
}

"""
aggregate fields of "moons"
"""
type moons_aggregate_fields {
  avg: moons_avg_fields
  count(columns: [moons_select_column!], distinct: Boolean): Int!
  max: moons_max_fields
  min: moons_min_fields
  stddev: moons_stddev_fields
  stddev_pop: moons_stddev_pop_fields
  stddev_samp: moons_stddev_samp_fields
  sum: moons_sum_fields
  var_pop: moons_var_pop_fields
  var_samp: moons_var_samp_fields
  variance: moons_variance_fields
}

"""aggregate avg on columns"""
type moons_avg_fields {
  id: Float
  planet_id: Float
}

"""
Boolean expression to filter rows from the table "moons". All fields are combined with a logical 'AND'.
"""
input moons_bool_exp {
  _and: [moons_bool_exp!]
  _not: moons_bool_exp
  _or: [moons_bool_exp!]
  created_at: timestamptz_comparison_exp
  id: Int_comparison_exp
  name: String_comparison_exp
  planet_id: Int_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "moons"
"""
enum moons_constraint {
  """
  unique or primary key constraint on columns "name"
  """
  moons_name_key

  """
  unique or primary key constraint on columns "id"
  """
  moons_pkey
}

"""
input type for incrementing numeric columns in table "moons"
"""
input moons_inc_input {
  id: Int
  planet_id: Int
}

"""
input type for inserting data into table "moons"
"""
input moons_insert_input {
  created_at: timestamptz
  id: Int
  name: String
  planet_id: Int
  updated_at: timestamptz
}

"""aggregate max on columns"""
type moons_max_fields {
  created_at: timestamptz
  id: Int
  name: String
  planet_id: Int
  updated_at: timestamptz
}

"""aggregate min on columns"""
type moons_min_fields {
  created_at: timestamptz
  id: Int
  name: String
  planet_id: Int
  updated_at: timestamptz
}

"""
response of any mutation on the table "moons"
"""
type moons_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [moons!]!
}

"""
on_conflict condition type for table "moons"
"""
input moons_on_conflict {
  constraint: moons_constraint!
  update_columns: [moons_update_column!]! = []
  where: moons_bool_exp
}

"""Ordering options when selecting data from "moons"."""
input moons_order_by {
  created_at: order_by
  id: order_by
  name: order_by
  planet_id: order_by
  updated_at: order_by
}

"""primary key columns input for table: moons"""
input moons_pk_columns_input {
  id: Int!
}

"""
select columns of table "moons"
"""
enum moons_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  name

  """column name"""
  planet_id

  """column name"""
  updated_at
}

"""
input type for updating data in table "moons"
"""
input moons_set_input {
  created_at: timestamptz
  id: Int
  name: String
  planet_id: Int
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type moons_stddev_fields {
  id: Float
  planet_id: Float
}

"""aggregate stddev_pop on columns"""
type moons_stddev_pop_fields {
  id: Float
  planet_id: Float
}

"""aggregate stddev_samp on columns"""
type moons_stddev_samp_fields {
  id: Float
  planet_id: Float
}

"""
Streaming cursor of the table "moons"
"""
input moons_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: moons_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input moons_stream_cursor_value_input {
  created_at: timestamptz
  id: Int
  name: String
  planet_id: Int
  updated_at: timestamptz
}

"""aggregate sum on columns"""
type moons_sum_fields {
  id: Int
  planet_id: Int
}

"""
update columns of table "moons"
"""
enum moons_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  name

  """column name"""
  planet_id

  """column name"""
  updated_at
}

input moons_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: moons_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: moons_set_input

  """filter the rows which have to be updated"""
  where: moons_bool_exp!
}

"""aggregate var_pop on columns"""
type moons_var_pop_fields {
  id: Float
  planet_id: Float
}

"""aggregate var_samp on columns"""
type moons_var_samp_fields {
  id: Float
  planet_id: Float
}

"""aggregate variance on columns"""
type moons_variance_fields {
  id: Float
  planet_id: Float
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "companies"
  """
  delete_companies(
    """filter the rows which have to be deleted"""
    where: companies_bool_exp!
  ): companies_mutation_response

  """
  delete single row from the table: "companies"
  """
  delete_companies_by_pk(id: Int!): companies

  """
  delete data from the table: "moons"
  """
  delete_moons(
    """filter the rows which have to be deleted"""
    where: moons_bool_exp!
  ): moons_mutation_response

  """
  delete single row from the table: "moons"
  """
  delete_moons_by_pk(id: Int!): moons

  """
  delete data from the table: "planets"
  """
  delete_planets(
    """filter the rows which have to be deleted"""
    where: planets_bool_exp!
  ): planets_mutation_response

  """
  delete single row from the table: "planets"
  """
  delete_planets_by_pk(id: Int!): planets

  """
  delete data from the table: "products"
  """
  delete_products(
    """filter the rows which have to be deleted"""
    where: products_bool_exp!
  ): products_mutation_response

  """
  delete single row from the table: "products"
  """
  delete_products_by_pk(id: Int!): products

  """
  insert data into the table: "companies"
  """
  insert_companies(
    """the rows to be inserted"""
    objects: [companies_insert_input!]!

    """upsert condition"""
    on_conflict: companies_on_conflict
  ): companies_mutation_response

  """
  insert a single row into the table: "companies"
  """
  insert_companies_one(
    """the row to be inserted"""
    object: companies_insert_input!

    """upsert condition"""
    on_conflict: companies_on_conflict
  ): companies

  """
  insert data into the table: "moons"
  """
  insert_moons(
    """the rows to be inserted"""
    objects: [moons_insert_input!]!

    """upsert condition"""
    on_conflict: moons_on_conflict
  ): moons_mutation_response

  """
  insert a single row into the table: "moons"
  """
  insert_moons_one(
    """the row to be inserted"""
    object: moons_insert_input!

    """upsert condition"""
    on_conflict: moons_on_conflict
  ): moons

  """
  insert data into the table: "planets"
  """
  insert_planets(
    """the rows to be inserted"""
    objects: [planets_insert_input!]!

    """upsert condition"""
    on_conflict: planets_on_conflict
  ): planets_mutation_response

  """
  insert a single row into the table: "planets"
  """
  insert_planets_one(
    """the row to be inserted"""
    object: planets_insert_input!

    """upsert condition"""
    on_conflict: planets_on_conflict
  ): planets

  """
  insert data into the table: "products"
  """
  insert_products(
    """the rows to be inserted"""
    objects: [products_insert_input!]!

    """upsert condition"""
    on_conflict: products_on_conflict
  ): products_mutation_response

  """
  insert a single row into the table: "products"
  """
  insert_products_one(
    """the row to be inserted"""
    object: products_insert_input!

    """upsert condition"""
    on_conflict: products_on_conflict
  ): products

  """
  update data of the table: "companies"
  """
  update_companies(
    """increments the numeric columns with given value of the filtered values"""
    _inc: companies_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: companies_set_input

    """filter the rows which have to be updated"""
    where: companies_bool_exp!
  ): companies_mutation_response

  """
  update single row of the table: "companies"
  """
  update_companies_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: companies_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: companies_set_input
    pk_columns: companies_pk_columns_input!
  ): companies

  """
  update multiples rows of table: "companies"
  """
  update_companies_many(
    """updates to execute, in order"""
    updates: [companies_updates!]!
  ): [companies_mutation_response]

  """
  update data of the table: "moons"
  """
  update_moons(
    """increments the numeric columns with given value of the filtered values"""
    _inc: moons_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: moons_set_input

    """filter the rows which have to be updated"""
    where: moons_bool_exp!
  ): moons_mutation_response

  """
  update single row of the table: "moons"
  """
  update_moons_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: moons_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: moons_set_input
    pk_columns: moons_pk_columns_input!
  ): moons

  """
  update multiples rows of table: "moons"
  """
  update_moons_many(
    """updates to execute, in order"""
    updates: [moons_updates!]!
  ): [moons_mutation_response]

  """
  update data of the table: "planets"
  """
  update_planets(
    """increments the numeric columns with given value of the filtered values"""
    _inc: planets_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: planets_set_input

    """filter the rows which have to be updated"""
    where: planets_bool_exp!
  ): planets_mutation_response

  """
  update single row of the table: "planets"
  """
  update_planets_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: planets_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: planets_set_input
    pk_columns: planets_pk_columns_input!
  ): planets

  """
  update multiples rows of table: "planets"
  """
  update_planets_many(
    """updates to execute, in order"""
    updates: [planets_updates!]!
  ): [planets_mutation_response]

  """
  update data of the table: "products"
  """
  update_products(
    """increments the numeric columns with given value of the filtered values"""
    _inc: products_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: products_set_input

    """filter the rows which have to be updated"""
    where: products_bool_exp!
  ): products_mutation_response

  """
  update single row of the table: "products"
  """
  update_products_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: products_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: products_set_input
    pk_columns: products_pk_columns_input!
  ): products

  """
  update multiples rows of table: "products"
  """
  update_products_many(
    """updates to execute, in order"""
    updates: [products_updates!]!
  ): [products_mutation_response]
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

"""
columns and relationships of "planets"
"""
type planets {
  created_at: timestamptz!
  geology_content: String!
  geology_source: String!
  id: Int!
  name: String!
  overview_content: String!
  overview_source: String!
  radius: bigint!
  revolution: bigint!
  rotation: bigint!
  structure_content: String!
  structure_source: String!
  temperature: Int!
  updated_at: timestamptz!
}

"""
aggregated selection of "planets"
"""
type planets_aggregate {
  aggregate: planets_aggregate_fields
  nodes: [planets!]!
}

"""
aggregate fields of "planets"
"""
type planets_aggregate_fields {
  avg: planets_avg_fields
  count(columns: [planets_select_column!], distinct: Boolean): Int!
  max: planets_max_fields
  min: planets_min_fields
  stddev: planets_stddev_fields
  stddev_pop: planets_stddev_pop_fields
  stddev_samp: planets_stddev_samp_fields
  sum: planets_sum_fields
  var_pop: planets_var_pop_fields
  var_samp: planets_var_samp_fields
  variance: planets_variance_fields
}

"""aggregate avg on columns"""
type planets_avg_fields {
  id: Float
  radius: Float
  revolution: Float
  rotation: Float
  temperature: Float
}

"""
Boolean expression to filter rows from the table "planets". All fields are combined with a logical 'AND'.
"""
input planets_bool_exp {
  _and: [planets_bool_exp!]
  _not: planets_bool_exp
  _or: [planets_bool_exp!]
  created_at: timestamptz_comparison_exp
  geology_content: String_comparison_exp
  geology_source: String_comparison_exp
  id: Int_comparison_exp
  name: String_comparison_exp
  overview_content: String_comparison_exp
  overview_source: String_comparison_exp
  radius: bigint_comparison_exp
  revolution: bigint_comparison_exp
  rotation: bigint_comparison_exp
  structure_content: String_comparison_exp
  structure_source: String_comparison_exp
  temperature: Int_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "planets"
"""
enum planets_constraint {
  """
  unique or primary key constraint on columns "name"
  """
  planets_name_key

  """
  unique or primary key constraint on columns "id"
  """
  planets_pkey
}

"""
input type for incrementing numeric columns in table "planets"
"""
input planets_inc_input {
  id: Int
  radius: bigint
  revolution: bigint
  rotation: bigint
  temperature: Int
}

"""
input type for inserting data into table "planets"
"""
input planets_insert_input {
  created_at: timestamptz
  geology_content: String
  geology_source: String
  id: Int
  name: String
  overview_content: String
  overview_source: String
  radius: bigint
  revolution: bigint
  rotation: bigint
  structure_content: String
  structure_source: String
  temperature: Int
  updated_at: timestamptz
}

"""aggregate max on columns"""
type planets_max_fields {
  created_at: timestamptz
  geology_content: String
  geology_source: String
  id: Int
  name: String
  overview_content: String
  overview_source: String
  radius: bigint
  revolution: bigint
  rotation: bigint
  structure_content: String
  structure_source: String
  temperature: Int
  updated_at: timestamptz
}

"""aggregate min on columns"""
type planets_min_fields {
  created_at: timestamptz
  geology_content: String
  geology_source: String
  id: Int
  name: String
  overview_content: String
  overview_source: String
  radius: bigint
  revolution: bigint
  rotation: bigint
  structure_content: String
  structure_source: String
  temperature: Int
  updated_at: timestamptz
}

"""
response of any mutation on the table "planets"
"""
type planets_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [planets!]!
}

"""
on_conflict condition type for table "planets"
"""
input planets_on_conflict {
  constraint: planets_constraint!
  update_columns: [planets_update_column!]! = []
  where: planets_bool_exp
}

"""Ordering options when selecting data from "planets"."""
input planets_order_by {
  created_at: order_by
  geology_content: order_by
  geology_source: order_by
  id: order_by
  name: order_by
  overview_content: order_by
  overview_source: order_by
  radius: order_by
  revolution: order_by
  rotation: order_by
  structure_content: order_by
  structure_source: order_by
  temperature: order_by
  updated_at: order_by
}

"""primary key columns input for table: planets"""
input planets_pk_columns_input {
  id: Int!
}

"""
select columns of table "planets"
"""
enum planets_select_column {
  """column name"""
  created_at

  """column name"""
  geology_content

  """column name"""
  geology_source

  """column name"""
  id

  """column name"""
  name

  """column name"""
  overview_content

  """column name"""
  overview_source

  """column name"""
  radius

  """column name"""
  revolution

  """column name"""
  rotation

  """column name"""
  structure_content

  """column name"""
  structure_source

  """column name"""
  temperature

  """column name"""
  updated_at
}

"""
input type for updating data in table "planets"
"""
input planets_set_input {
  created_at: timestamptz
  geology_content: String
  geology_source: String
  id: Int
  name: String
  overview_content: String
  overview_source: String
  radius: bigint
  revolution: bigint
  rotation: bigint
  structure_content: String
  structure_source: String
  temperature: Int
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type planets_stddev_fields {
  id: Float
  radius: Float
  revolution: Float
  rotation: Float
  temperature: Float
}

"""aggregate stddev_pop on columns"""
type planets_stddev_pop_fields {
  id: Float
  radius: Float
  revolution: Float
  rotation: Float
  temperature: Float
}

"""aggregate stddev_samp on columns"""
type planets_stddev_samp_fields {
  id: Float
  radius: Float
  revolution: Float
  rotation: Float
  temperature: Float
}

"""
Streaming cursor of the table "planets"
"""
input planets_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: planets_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input planets_stream_cursor_value_input {
  created_at: timestamptz
  geology_content: String
  geology_source: String
  id: Int
  name: String
  overview_content: String
  overview_source: String
  radius: bigint
  revolution: bigint
  rotation: bigint
  structure_content: String
  structure_source: String
  temperature: Int
  updated_at: timestamptz
}

"""aggregate sum on columns"""
type planets_sum_fields {
  id: Int
  radius: bigint
  revolution: bigint
  rotation: bigint
  temperature: Int
}

"""
update columns of table "planets"
"""
enum planets_update_column {
  """column name"""
  created_at

  """column name"""
  geology_content

  """column name"""
  geology_source

  """column name"""
  id

  """column name"""
  name

  """column name"""
  overview_content

  """column name"""
  overview_source

  """column name"""
  radius

  """column name"""
  revolution

  """column name"""
  rotation

  """column name"""
  structure_content

  """column name"""
  structure_source

  """column name"""
  temperature

  """column name"""
  updated_at
}

input planets_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: planets_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: planets_set_input

  """filter the rows which have to be updated"""
  where: planets_bool_exp!
}

"""aggregate var_pop on columns"""
type planets_var_pop_fields {
  id: Float
  radius: Float
  revolution: Float
  rotation: Float
  temperature: Float
}

"""aggregate var_samp on columns"""
type planets_var_samp_fields {
  id: Float
  radius: Float
  revolution: Float
  rotation: Float
  temperature: Float
}

"""aggregate variance on columns"""
type planets_variance_fields {
  id: Float
  radius: Float
  revolution: Float
  rotation: Float
  temperature: Float
}

"""
columns and relationships of "products"
"""
type products {
  """An object relationship"""
  company: companies!
  created_at: timestamptz!
  id: Int!
  manufacturer_id: Int!
  name: String!
  updated_at: timestamptz!
}

"""
aggregated selection of "products"
"""
type products_aggregate {
  aggregate: products_aggregate_fields
  nodes: [products!]!
}

input products_aggregate_bool_exp {
  count: products_aggregate_bool_exp_count
}

input products_aggregate_bool_exp_count {
  arguments: [products_select_column!]
  distinct: Boolean
  filter: products_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "products"
"""
type products_aggregate_fields {
  avg: products_avg_fields
  count(columns: [products_select_column!], distinct: Boolean): Int!
  max: products_max_fields
  min: products_min_fields
  stddev: products_stddev_fields
  stddev_pop: products_stddev_pop_fields
  stddev_samp: products_stddev_samp_fields
  sum: products_sum_fields
  var_pop: products_var_pop_fields
  var_samp: products_var_samp_fields
  variance: products_variance_fields
}

"""
order by aggregate values of table "products"
"""
input products_aggregate_order_by {
  avg: products_avg_order_by
  count: order_by
  max: products_max_order_by
  min: products_min_order_by
  stddev: products_stddev_order_by
  stddev_pop: products_stddev_pop_order_by
  stddev_samp: products_stddev_samp_order_by
  sum: products_sum_order_by
  var_pop: products_var_pop_order_by
  var_samp: products_var_samp_order_by
  variance: products_variance_order_by
}

"""
input type for inserting array relation for remote table "products"
"""
input products_arr_rel_insert_input {
  data: [products_insert_input!]!

  """upsert condition"""
  on_conflict: products_on_conflict
}

"""aggregate avg on columns"""
type products_avg_fields {
  id: Float
  manufacturer_id: Float
}

"""
order by avg() on columns of table "products"
"""
input products_avg_order_by {
  id: order_by
  manufacturer_id: order_by
}

"""
Boolean expression to filter rows from the table "products". All fields are combined with a logical 'AND'.
"""
input products_bool_exp {
  _and: [products_bool_exp!]
  _not: products_bool_exp
  _or: [products_bool_exp!]
  company: companies_bool_exp
  created_at: timestamptz_comparison_exp
  id: Int_comparison_exp
  manufacturer_id: Int_comparison_exp
  name: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "products"
"""
enum products_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  products_pkey
}

"""
input type for incrementing numeric columns in table "products"
"""
input products_inc_input {
  id: Int
  manufacturer_id: Int
}

"""
input type for inserting data into table "products"
"""
input products_insert_input {
  company: companies_obj_rel_insert_input
  created_at: timestamptz
  id: Int
  manufacturer_id: Int
  name: String
  updated_at: timestamptz
}

"""aggregate max on columns"""
type products_max_fields {
  created_at: timestamptz
  id: Int
  manufacturer_id: Int
  name: String
  updated_at: timestamptz
}

"""
order by max() on columns of table "products"
"""
input products_max_order_by {
  created_at: order_by
  id: order_by
  manufacturer_id: order_by
  name: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type products_min_fields {
  created_at: timestamptz
  id: Int
  manufacturer_id: Int
  name: String
  updated_at: timestamptz
}

"""
order by min() on columns of table "products"
"""
input products_min_order_by {
  created_at: order_by
  id: order_by
  manufacturer_id: order_by
  name: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "products"
"""
type products_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [products!]!
}

"""
on_conflict condition type for table "products"
"""
input products_on_conflict {
  constraint: products_constraint!
  update_columns: [products_update_column!]! = []
  where: products_bool_exp
}

"""Ordering options when selecting data from "products"."""
input products_order_by {
  company: companies_order_by
  created_at: order_by
  id: order_by
  manufacturer_id: order_by
  name: order_by
  updated_at: order_by
}

"""primary key columns input for table: products"""
input products_pk_columns_input {
  id: Int!
}

"""
select columns of table "products"
"""
enum products_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  manufacturer_id

  """column name"""
  name

  """column name"""
  updated_at
}

"""
input type for updating data in table "products"
"""
input products_set_input {
  created_at: timestamptz
  id: Int
  manufacturer_id: Int
  name: String
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type products_stddev_fields {
  id: Float
  manufacturer_id: Float
}

"""
order by stddev() on columns of table "products"
"""
input products_stddev_order_by {
  id: order_by
  manufacturer_id: order_by
}

"""aggregate stddev_pop on columns"""
type products_stddev_pop_fields {
  id: Float
  manufacturer_id: Float
}

"""
order by stddev_pop() on columns of table "products"
"""
input products_stddev_pop_order_by {
  id: order_by
  manufacturer_id: order_by
}

"""aggregate stddev_samp on columns"""
type products_stddev_samp_fields {
  id: Float
  manufacturer_id: Float
}

"""
order by stddev_samp() on columns of table "products"
"""
input products_stddev_samp_order_by {
  id: order_by
  manufacturer_id: order_by
}

"""
Streaming cursor of the table "products"
"""
input products_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: products_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input products_stream_cursor_value_input {
  created_at: timestamptz
  id: Int
  manufacturer_id: Int
  name: String
  updated_at: timestamptz
}

"""aggregate sum on columns"""
type products_sum_fields {
  id: Int
  manufacturer_id: Int
}

"""
order by sum() on columns of table "products"
"""
input products_sum_order_by {
  id: order_by
  manufacturer_id: order_by
}

"""
update columns of table "products"
"""
enum products_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  manufacturer_id

  """column name"""
  name

  """column name"""
  updated_at
}

input products_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: products_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: products_set_input

  """filter the rows which have to be updated"""
  where: products_bool_exp!
}

"""aggregate var_pop on columns"""
type products_var_pop_fields {
  id: Float
  manufacturer_id: Float
}

"""
order by var_pop() on columns of table "products"
"""
input products_var_pop_order_by {
  id: order_by
  manufacturer_id: order_by
}

"""aggregate var_samp on columns"""
type products_var_samp_fields {
  id: Float
  manufacturer_id: Float
}

"""
order by var_samp() on columns of table "products"
"""
input products_var_samp_order_by {
  id: order_by
  manufacturer_id: order_by
}

"""aggregate variance on columns"""
type products_variance_fields {
  id: Float
  manufacturer_id: Float
}

"""
order by variance() on columns of table "products"
"""
input products_variance_order_by {
  id: order_by
  manufacturer_id: order_by
}

type query_root {
  """
  fetch data from the table: "companies"
  """
  companies(
    """distinct select on columns"""
    distinct_on: [companies_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [companies_order_by!]

    """filter the rows returned"""
    where: companies_bool_exp
  ): [companies!]!

  """
  fetch aggregated fields from the table: "companies"
  """
  companies_aggregate(
    """distinct select on columns"""
    distinct_on: [companies_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [companies_order_by!]

    """filter the rows returned"""
    where: companies_bool_exp
  ): companies_aggregate!

  """fetch data from the table: "companies" using primary key columns"""
  companies_by_pk(id: Int!): companies

  """
  fetch data from the table: "moons"
  """
  moons(
    """distinct select on columns"""
    distinct_on: [moons_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [moons_order_by!]

    """filter the rows returned"""
    where: moons_bool_exp
  ): [moons!]!

  """
  fetch aggregated fields from the table: "moons"
  """
  moons_aggregate(
    """distinct select on columns"""
    distinct_on: [moons_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [moons_order_by!]

    """filter the rows returned"""
    where: moons_bool_exp
  ): moons_aggregate!

  """fetch data from the table: "moons" using primary key columns"""
  moons_by_pk(id: Int!): moons

  """
  fetch data from the table: "planets"
  """
  planets(
    """distinct select on columns"""
    distinct_on: [planets_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [planets_order_by!]

    """filter the rows returned"""
    where: planets_bool_exp
  ): [planets!]!

  """
  fetch aggregated fields from the table: "planets"
  """
  planets_aggregate(
    """distinct select on columns"""
    distinct_on: [planets_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [planets_order_by!]

    """filter the rows returned"""
    where: planets_bool_exp
  ): planets_aggregate!

  """fetch data from the table: "planets" using primary key columns"""
  planets_by_pk(id: Int!): planets

  """An array relationship"""
  products(
    """distinct select on columns"""
    distinct_on: [products_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [products_order_by!]

    """filter the rows returned"""
    where: products_bool_exp
  ): [products!]!

  """An aggregate relationship"""
  products_aggregate(
    """distinct select on columns"""
    distinct_on: [products_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [products_order_by!]

    """filter the rows returned"""
    where: products_bool_exp
  ): products_aggregate!

  """fetch data from the table: "products" using primary key columns"""
  products_by_pk(id: Int!): products
}

type subscription_root {
  """
  fetch data from the table: "companies"
  """
  companies(
    """distinct select on columns"""
    distinct_on: [companies_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [companies_order_by!]

    """filter the rows returned"""
    where: companies_bool_exp
  ): [companies!]!

  """
  fetch aggregated fields from the table: "companies"
  """
  companies_aggregate(
    """distinct select on columns"""
    distinct_on: [companies_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [companies_order_by!]

    """filter the rows returned"""
    where: companies_bool_exp
  ): companies_aggregate!

  """fetch data from the table: "companies" using primary key columns"""
  companies_by_pk(id: Int!): companies

  """
  fetch data from the table in a streaming manner: "companies"
  """
  companies_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [companies_stream_cursor_input]!

    """filter the rows returned"""
    where: companies_bool_exp
  ): [companies!]!

  """
  fetch data from the table: "moons"
  """
  moons(
    """distinct select on columns"""
    distinct_on: [moons_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [moons_order_by!]

    """filter the rows returned"""
    where: moons_bool_exp
  ): [moons!]!

  """
  fetch aggregated fields from the table: "moons"
  """
  moons_aggregate(
    """distinct select on columns"""
    distinct_on: [moons_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [moons_order_by!]

    """filter the rows returned"""
    where: moons_bool_exp
  ): moons_aggregate!

  """fetch data from the table: "moons" using primary key columns"""
  moons_by_pk(id: Int!): moons

  """
  fetch data from the table in a streaming manner: "moons"
  """
  moons_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [moons_stream_cursor_input]!

    """filter the rows returned"""
    where: moons_bool_exp
  ): [moons!]!

  """
  fetch data from the table: "planets"
  """
  planets(
    """distinct select on columns"""
    distinct_on: [planets_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [planets_order_by!]

    """filter the rows returned"""
    where: planets_bool_exp
  ): [planets!]!

  """
  fetch aggregated fields from the table: "planets"
  """
  planets_aggregate(
    """distinct select on columns"""
    distinct_on: [planets_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [planets_order_by!]

    """filter the rows returned"""
    where: planets_bool_exp
  ): planets_aggregate!

  """fetch data from the table: "planets" using primary key columns"""
  planets_by_pk(id: Int!): planets

  """
  fetch data from the table in a streaming manner: "planets"
  """
  planets_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [planets_stream_cursor_input]!

    """filter the rows returned"""
    where: planets_bool_exp
  ): [planets!]!

  """An array relationship"""
  products(
    """distinct select on columns"""
    distinct_on: [products_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [products_order_by!]

    """filter the rows returned"""
    where: products_bool_exp
  ): [products!]!

  """An aggregate relationship"""
  products_aggregate(
    """distinct select on columns"""
    distinct_on: [products_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [products_order_by!]

    """filter the rows returned"""
    where: products_bool_exp
  ): products_aggregate!

  """fetch data from the table: "products" using primary key columns"""
  products_by_pk(id: Int!): products

  """
  fetch data from the table in a streaming manner: "products"
  """
  products_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [products_stream_cursor_input]!

    """filter the rows returned"""
    where: products_bool_exp
  ): [products!]!
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}